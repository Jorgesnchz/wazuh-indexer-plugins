import org.opensearch.gradle.test.RestIntegTestTask
import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin

import java.util.concurrent.Callable

buildscript {
  ext {
    opensearch_version = System.getProperty("opensearch.version", "2.19.1-SNAPSHOT")
    opensearch_build = opensearch_version.replace("-SNAPSHOT","") + ".0"
    wazuh_version = System.getProperty("version", "6.0.0")
    revision = System.getProperty("revision", "0")
  }

  repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.pluginzip'

def pluginName = 'wazuh-indexer-content-manager'
def pluginDescription = 'Wazuh Indexer content manager plugin'
def projectPath = 'com.wazuh'
def pathToPlugin = 'contentmanager'
def pluginClassName = 'ContentManagerPlugin'

publishing {
  publications {
    pluginZip(MavenPublication) { publication ->
      pom {
        name = pluginName
        description = pluginDescription
        licenses {
          license {
            name = "GNU Affero General Public License (AGPL) version 3.0"
            url = "http://www.gnu.org/licenses/agpl-3.0.txt"
          }
        }
        developers {
          developer {
            name = "Wazuh"
            url = "https://wazuh.com"
          }
        }
      }
    }
  }
}

allprojects {
  group = "${projectPath}"
  version = "${wazuh_version}" + ".${revision}"
  targetCompatibility = JavaVersion.VERSION_11
  sourceCompatibility = JavaVersion.VERSION_11

  plugins.withType(ShadowPlugin).whenPluginAdded {
    publishing {
      repositories {
        maven {
          name = 'staging'
          url = "${rootProject.buildDir}/local-staging-repo"
        }
      }
    }
  }
}

opensearchplugin {
  name pluginName
  description pluginDescription
  classname "${projectPath}.${pathToPlugin}.${pluginClassName}"
  licenseFile rootProject.file('LICENSE.txt')
  noticeFile rootProject.file('NOTICE.txt')
}

configurations {
  zipArchive
}

dependencies {
//  implementation project(path: ":wazuh-indexer-command-manager-spi", configuration: 'shadow')
//   compileOnly project(":wazuh-indexer-command-manager-spi") // TODO: We should use this instead `implementation`
//  compileOnly "com.wazuh:wazuh-indexer-command-manager-spi:${wazuh_version}.${revision}"

  compileOnly "com.wazuh:wazuh-indexer-command-manager-spi:6.0.0.0"

  implementation "org.apache.httpcomponents.client5:httpclient5:5.4.4"
  implementation "org.apache.httpcomponents.core5:httpcore5-h2:5.3.4"
  implementation "org.apache.httpcomponents.core5:httpcore5:5.3.4"
  implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.23.1"
  implementation "org.slf4j:slf4j-api:2.0.16"

  // ZipArchive dependencies used for integration tests
  zipArchive group: 'org.opensearch.plugin', name: 'opensearch-job-scheduler', version: "${opensearch_build}"
//  zipArchive group: 'com.wazuh', name: 'wazuh-indexer-command-manager', version: "${wazuh_version}.${revision}"
  zipArchive "com.wazuh:wazuh-indexer-command-manager:6.0.0.0@zip"
}


// No need to validate license headers since spotless checks and applies it
licenseHeaders.enabled = false

// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false

// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false

// Skip forbiddenAPIs check on dependencies
thirdPartyAudit.enabled = false

//Skip checking for third party licenses
dependencyLicenses.enabled = false

repositories {
  mavenLocal()
  maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
  mavenCentral()
  maven { url "https://plugins.gradle.org/m2/" }
}

test {
  include '**/*Tests.class'
}

dependencies {
  implementation 'com.google.code.gson:gson:2.8.9'
}

task integTest(type: RestIntegTestTask) {
  description = "Run tests against a cluster"
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
  // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
  if (System.getProperty("test.debug") != null) {
    jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
  }
}

testClusters.integTest {
  // Installs all registered zipArchive dependencies on integTest cluster nodes
  configurations.zipArchive.asFileTree.each {
    plugin(provider(new Callable<RegularFile>(){
      @Override
      RegularFile call() throws Exception {
        return new RegularFile() {
          @Override
          File getAsFile() {
            return it
          }
        }
      }
    }))
  }
  testDistribution = "ARCHIVE"
  // This installs our plugin into the testClusters
  plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
  useCluster testClusters.integTest
}

// updateVersion: Task to auto update version to the next development iteration
task updateVersion {
  onlyIf { System.getProperty('newVersion') }
  doLast {
    ext.newVersion = System.getProperty('newVersion')
    println "Setting version to ${newVersion}."
    // String tokenization to support -SNAPSHOT
    ant.replaceregexp(file: 'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags: 'g', byline: true)
  }
}
